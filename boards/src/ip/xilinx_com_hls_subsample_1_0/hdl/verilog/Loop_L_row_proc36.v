// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module Loop_L_row_proc36 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        rows_dout,
        rows_empty_n,
        rows_read,
        cols_dout,
        cols_empty_n,
        cols_read,
        src_data_stream_0_V_dout,
        src_data_stream_0_V_empty_n,
        src_data_stream_0_V_read,
        src_data_stream_1_V_dout,
        src_data_stream_1_V_empty_n,
        src_data_stream_1_V_read,
        src_data_stream_2_V_dout,
        src_data_stream_2_V_empty_n,
        src_data_stream_2_V_read,
        dst_data_stream_0_V_din,
        dst_data_stream_0_V_full_n,
        dst_data_stream_0_V_write,
        dst_data_stream_1_V_din,
        dst_data_stream_1_V_full_n,
        dst_data_stream_1_V_write,
        dst_data_stream_2_V_din,
        dst_data_stream_2_V_full_n,
        dst_data_stream_2_V_write
);

parameter    ap_ST_fsm_state1 = 5'd1;
parameter    ap_ST_fsm_state2 = 5'd2;
parameter    ap_ST_fsm_state3 = 5'd4;
parameter    ap_ST_fsm_pp0_stage0 = 5'd8;
parameter    ap_ST_fsm_state6 = 5'd16;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [31:0] rows_dout;
input   rows_empty_n;
output   rows_read;
input  [31:0] cols_dout;
input   cols_empty_n;
output   cols_read;
input  [7:0] src_data_stream_0_V_dout;
input   src_data_stream_0_V_empty_n;
output   src_data_stream_0_V_read;
input  [7:0] src_data_stream_1_V_dout;
input   src_data_stream_1_V_empty_n;
output   src_data_stream_1_V_read;
input  [7:0] src_data_stream_2_V_dout;
input   src_data_stream_2_V_empty_n;
output   src_data_stream_2_V_read;
output  [7:0] dst_data_stream_0_V_din;
input   dst_data_stream_0_V_full_n;
output   dst_data_stream_0_V_write;
output  [7:0] dst_data_stream_1_V_din;
input   dst_data_stream_1_V_full_n;
output   dst_data_stream_1_V_write;
output  [7:0] dst_data_stream_2_V_din;
input   dst_data_stream_2_V_full_n;
output   dst_data_stream_2_V_write;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg rows_read;
reg cols_read;
reg src_data_stream_0_V_read;
reg src_data_stream_1_V_read;
reg src_data_stream_2_V_read;
reg dst_data_stream_0_V_write;
reg dst_data_stream_1_V_write;
reg dst_data_stream_2_V_write;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [4:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    rows_blk_n;
reg    cols_blk_n;
reg    src_data_stream_0_V_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg    src_data_stream_1_V_blk_n;
reg    src_data_stream_2_V_blk_n;
reg    dst_data_stream_0_V_blk_n;
reg   [0:0] tmp_6_demorgan_i_reg_379;
reg    dst_data_stream_1_V_blk_n;
reg    dst_data_stream_2_V_blk_n;
reg   [31:0] row8_reg_214;
reg   [0:0] exitcond_i7_reg_225;
reg   [31:0] col_i6_reg_234;
reg   [31:0] row_i5_reg_245;
reg   [63:0] indvar_flatten4_reg_256;
reg   [31:0] rows_read_reg_347;
reg    ap_block_state1;
reg   [31:0] cols_read_reg_352;
wire   [63:0] bound_fu_273_p2;
reg   [63:0] bound_reg_359;
wire    ap_CS_fsm_state2;
wire   [0:0] exitcond_i2_fu_279_p2;
wire    ap_CS_fsm_state3;
wire   [0:0] exitcond_flatten3_fu_284_p2;
wire   [31:0] row_cast_i_mid2_v_fu_297_p3;
reg   [31:0] row_cast_i_mid2_v_reg_374;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_state4_pp0_stage0_iter0;
reg    ap_block_state5_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_11001;
wire   [0:0] tmp_6_demorgan_i_fu_313_p2;
wire   [63:0] indvar_flatten_next_fu_319_p2;
reg   [63:0] indvar_flatten_next_reg_383;
wire   [31:0] col_fu_325_p2;
reg   [31:0] col_reg_388;
wire   [0:0] exitcond_i_fu_331_p2;
reg   [0:0] exitcond_i_reg_393;
wire   [31:0] row_fu_336_p2;
reg   [31:0] row_reg_398;
wire   [0:0] exitcond_flatten_fu_342_p2;
reg   [0:0] exitcond_flatten_reg_403;
reg    ap_block_pp0_stage0_subdone;
reg   [31:0] ap_phi_mux_row8_phi_fu_218_p4;
reg   [0:0] ap_phi_mux_exitcond_i7_phi_fu_228_p4;
reg   [31:0] ap_phi_mux_col_i6_phi_fu_238_p4;
reg   [31:0] ap_phi_mux_row_i5_phi_fu_249_p4;
reg   [63:0] ap_phi_mux_indvar_flatten4_phi_fu_260_p4;
reg    ap_block_pp0_stage0_01001;
wire   [31:0] bound_fu_273_p0;
wire   [31:0] bound_fu_273_p1;
wire   [31:0] col_i_mid2_fu_289_p3;
wire   [0:0] tmp_3_fu_309_p1;
wire   [0:0] tmp_fu_305_p1;
wire    ap_CS_fsm_state6;
reg   [4:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire   [63:0] bound_fu_273_p00;
wire   [63:0] bound_fu_273_p10;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 5'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state6)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone) & (exitcond_flatten_fu_342_p2 == 1'd1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((exitcond_flatten3_fu_284_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if (((exitcond_flatten3_fu_284_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten3_fu_284_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        col_i6_reg_234 <= 32'd0;
    end else if (((exitcond_flatten_reg_403 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        col_i6_reg_234 <= col_reg_388;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten3_fu_284_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        exitcond_i7_reg_225 <= exitcond_i2_fu_279_p2;
    end else if (((exitcond_flatten_reg_403 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        exitcond_i7_reg_225 <= exitcond_i_reg_393;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten3_fu_284_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        indvar_flatten4_reg_256 <= 64'd0;
    end else if (((exitcond_flatten_reg_403 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        indvar_flatten4_reg_256 <= indvar_flatten_next_reg_383;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten3_fu_284_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        row8_reg_214 <= 32'd1;
    end else if (((exitcond_flatten_reg_403 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        row8_reg_214 <= row_reg_398;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten3_fu_284_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        row_i5_reg_245 <= 32'd0;
    end else if (((exitcond_flatten_reg_403 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        row_i5_reg_245 <= row_cast_i_mid2_v_reg_374;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        bound_reg_359 <= bound_fu_273_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        col_reg_388 <= col_fu_325_p2;
        exitcond_i_reg_393 <= exitcond_i_fu_331_p2;
        indvar_flatten_next_reg_383 <= indvar_flatten_next_fu_319_p2;
        row_cast_i_mid2_v_reg_374 <= row_cast_i_mid2_v_fu_297_p3;
        row_reg_398 <= row_fu_336_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((cols_empty_n == 1'b0) | (rows_empty_n == 1'b0) | (ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        cols_read_reg_352 <= cols_dout;
        rows_read_reg_347 <= rows_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        exitcond_flatten_reg_403 <= exitcond_flatten_fu_342_p2;
        tmp_6_demorgan_i_reg_379 <= tmp_6_demorgan_i_fu_313_p2;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_flatten_reg_403 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_col_i6_phi_fu_238_p4 = col_reg_388;
    end else begin
        ap_phi_mux_col_i6_phi_fu_238_p4 = col_i6_reg_234;
    end
end

always @ (*) begin
    if (((exitcond_flatten_reg_403 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_exitcond_i7_phi_fu_228_p4 = exitcond_i_reg_393;
    end else begin
        ap_phi_mux_exitcond_i7_phi_fu_228_p4 = exitcond_i7_reg_225;
    end
end

always @ (*) begin
    if (((exitcond_flatten_reg_403 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_indvar_flatten4_phi_fu_260_p4 = indvar_flatten_next_reg_383;
    end else begin
        ap_phi_mux_indvar_flatten4_phi_fu_260_p4 = indvar_flatten4_reg_256;
    end
end

always @ (*) begin
    if (((exitcond_flatten_reg_403 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_row8_phi_fu_218_p4 = row_reg_398;
    end else begin
        ap_phi_mux_row8_phi_fu_218_p4 = row8_reg_214;
    end
end

always @ (*) begin
    if (((exitcond_flatten_reg_403 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_row_i5_phi_fu_249_p4 = row_cast_i_mid2_v_reg_374;
    end else begin
        ap_phi_mux_row_i5_phi_fu_249_p4 = row_i5_reg_245;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        cols_blk_n = cols_empty_n;
    end else begin
        cols_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((cols_empty_n == 1'b0) | (rows_empty_n == 1'b0) | (ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        cols_read = 1'b1;
    end else begin
        cols_read = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_6_demorgan_i_reg_379 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        dst_data_stream_0_V_blk_n = dst_data_stream_0_V_full_n;
    end else begin
        dst_data_stream_0_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((tmp_6_demorgan_i_reg_379 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        dst_data_stream_0_V_write = 1'b1;
    end else begin
        dst_data_stream_0_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_6_demorgan_i_reg_379 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        dst_data_stream_1_V_blk_n = dst_data_stream_1_V_full_n;
    end else begin
        dst_data_stream_1_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((tmp_6_demorgan_i_reg_379 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        dst_data_stream_1_V_write = 1'b1;
    end else begin
        dst_data_stream_1_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_6_demorgan_i_reg_379 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        dst_data_stream_2_V_blk_n = dst_data_stream_2_V_full_n;
    end else begin
        dst_data_stream_2_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((tmp_6_demorgan_i_reg_379 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        dst_data_stream_2_V_write = 1'b1;
    end else begin
        dst_data_stream_2_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        rows_blk_n = rows_empty_n;
    end else begin
        rows_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((cols_empty_n == 1'b0) | (rows_empty_n == 1'b0) | (ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        rows_read = 1'b1;
    end else begin
        rows_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        src_data_stream_0_V_blk_n = src_data_stream_0_V_empty_n;
    end else begin
        src_data_stream_0_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        src_data_stream_0_V_read = 1'b1;
    end else begin
        src_data_stream_0_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        src_data_stream_1_V_blk_n = src_data_stream_1_V_empty_n;
    end else begin
        src_data_stream_1_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        src_data_stream_1_V_read = 1'b1;
    end else begin
        src_data_stream_1_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        src_data_stream_2_V_blk_n = src_data_stream_2_V_empty_n;
    end else begin
        src_data_stream_2_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        src_data_stream_2_V_read = 1'b1;
    end else begin
        src_data_stream_2_V_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((cols_empty_n == 1'b0) | (rows_empty_n == 1'b0) | (ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            if (((exitcond_flatten3_fu_284_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if (~((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd4];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((ap_enable_reg_pp0_iter1 == 1'b1) & ((src_data_stream_2_V_empty_n == 1'b0) | (src_data_stream_1_V_empty_n == 1'b0) | (src_data_stream_0_V_empty_n == 1'b0) | ((tmp_6_demorgan_i_reg_379 == 1'd0) & (dst_data_stream_2_V_full_n == 1'b0)) | ((tmp_6_demorgan_i_reg_379 == 1'd0) & (dst_data_stream_1_V_full_n == 1'b0)) | ((tmp_6_demorgan_i_reg_379 == 1'd0) & (dst_data_stream_0_V_full_n == 1'b0))));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_enable_reg_pp0_iter1 == 1'b1) & ((src_data_stream_2_V_empty_n == 1'b0) | (src_data_stream_1_V_empty_n == 1'b0) | (src_data_stream_0_V_empty_n == 1'b0) | ((tmp_6_demorgan_i_reg_379 == 1'd0) & (dst_data_stream_2_V_full_n == 1'b0)) | ((tmp_6_demorgan_i_reg_379 == 1'd0) & (dst_data_stream_1_V_full_n == 1'b0)) | ((tmp_6_demorgan_i_reg_379 == 1'd0) & (dst_data_stream_0_V_full_n == 1'b0))));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_enable_reg_pp0_iter1 == 1'b1) & ((src_data_stream_2_V_empty_n == 1'b0) | (src_data_stream_1_V_empty_n == 1'b0) | (src_data_stream_0_V_empty_n == 1'b0) | ((tmp_6_demorgan_i_reg_379 == 1'd0) & (dst_data_stream_2_V_full_n == 1'b0)) | ((tmp_6_demorgan_i_reg_379 == 1'd0) & (dst_data_stream_1_V_full_n == 1'b0)) | ((tmp_6_demorgan_i_reg_379 == 1'd0) & (dst_data_stream_0_V_full_n == 1'b0))));
end

always @ (*) begin
    ap_block_state1 = ((cols_empty_n == 1'b0) | (rows_empty_n == 1'b0) | (ap_start == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_block_state4_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state5_pp0_stage0_iter1 = ((src_data_stream_2_V_empty_n == 1'b0) | (src_data_stream_1_V_empty_n == 1'b0) | (src_data_stream_0_V_empty_n == 1'b0) | ((tmp_6_demorgan_i_reg_379 == 1'd0) & (dst_data_stream_2_V_full_n == 1'b0)) | ((tmp_6_demorgan_i_reg_379 == 1'd0) & (dst_data_stream_1_V_full_n == 1'b0)) | ((tmp_6_demorgan_i_reg_379 == 1'd0) & (dst_data_stream_0_V_full_n == 1'b0)));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign bound_fu_273_p0 = bound_fu_273_p00;

assign bound_fu_273_p00 = cols_read_reg_352;

assign bound_fu_273_p1 = bound_fu_273_p10;

assign bound_fu_273_p10 = rows_read_reg_347;

assign bound_fu_273_p2 = (bound_fu_273_p0 * bound_fu_273_p1);

assign col_fu_325_p2 = (col_i_mid2_fu_289_p3 + 32'd1);

assign col_i_mid2_fu_289_p3 = ((ap_phi_mux_exitcond_i7_phi_fu_228_p4[0:0] === 1'b1) ? 32'd0 : ap_phi_mux_col_i6_phi_fu_238_p4);

assign dst_data_stream_0_V_din = src_data_stream_0_V_dout;

assign dst_data_stream_1_V_din = src_data_stream_1_V_dout;

assign dst_data_stream_2_V_din = src_data_stream_2_V_dout;

assign exitcond_flatten3_fu_284_p2 = ((bound_reg_359 == 64'd0) ? 1'b1 : 1'b0);

assign exitcond_flatten_fu_342_p2 = ((indvar_flatten_next_fu_319_p2 == bound_reg_359) ? 1'b1 : 1'b0);

assign exitcond_i2_fu_279_p2 = ((cols_read_reg_352 == 32'd0) ? 1'b1 : 1'b0);

assign exitcond_i_fu_331_p2 = ((col_fu_325_p2 == cols_read_reg_352) ? 1'b1 : 1'b0);

assign indvar_flatten_next_fu_319_p2 = (64'd1 + ap_phi_mux_indvar_flatten4_phi_fu_260_p4);

assign row_cast_i_mid2_v_fu_297_p3 = ((ap_phi_mux_exitcond_i7_phi_fu_228_p4[0:0] === 1'b1) ? ap_phi_mux_row8_phi_fu_218_p4 : ap_phi_mux_row_i5_phi_fu_249_p4);

assign row_fu_336_p2 = (row_cast_i_mid2_v_fu_297_p3 + 32'd1);

assign tmp_3_fu_309_p1 = col_i_mid2_fu_289_p3[0:0];

assign tmp_6_demorgan_i_fu_313_p2 = (tmp_fu_305_p1 | tmp_3_fu_309_p1);

assign tmp_fu_305_p1 = row_cast_i_mid2_v_fu_297_p3[0:0];

endmodule //Loop_L_row_proc36
