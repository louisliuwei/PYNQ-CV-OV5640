// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module gradient_decompositi (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        gx_rows_V_dout,
        gx_rows_V_empty_n,
        gx_rows_V_read,
        gx_cols_V_dout,
        gx_cols_V_empty_n,
        gx_cols_V_read,
        gx_data_stream_V_dout,
        gx_data_stream_V_empty_n,
        gx_data_stream_V_read,
        gy_data_stream_V_dout,
        gy_data_stream_V_empty_n,
        gy_data_stream_V_read,
        gd_data_stream_V_din,
        gd_data_stream_V_full_n,
        gd_data_stream_V_write
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_state2 = 4'd2;
parameter    ap_ST_fsm_pp0_stage0 = 4'd4;
parameter    ap_ST_fsm_state7 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [31:0] gx_rows_V_dout;
input   gx_rows_V_empty_n;
output   gx_rows_V_read;
input  [31:0] gx_cols_V_dout;
input   gx_cols_V_empty_n;
output   gx_cols_V_read;
input  [15:0] gx_data_stream_V_dout;
input   gx_data_stream_V_empty_n;
output   gx_data_stream_V_read;
input  [15:0] gy_data_stream_V_dout;
input   gy_data_stream_V_empty_n;
output   gy_data_stream_V_read;
output  [15:0] gd_data_stream_V_din;
input   gd_data_stream_V_full_n;
output   gd_data_stream_V_write;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg gx_rows_V_read;
reg gx_cols_V_read;
reg gx_data_stream_V_read;
reg gy_data_stream_V_read;
reg gd_data_stream_V_write;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    gx_rows_V_blk_n;
reg    gx_cols_V_blk_n;
reg    gx_data_stream_V_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] exitcond_i_reg_672;
reg    gy_data_stream_V_blk_n;
reg    gd_data_stream_V_blk_n;
reg    ap_enable_reg_pp0_iter3;
reg   [0:0] exitcond_i_reg_672_pp0_iter2_reg;
reg   [31:0] t_V_3_reg_176;
reg   [31:0] rows_V_reg_653;
reg    ap_block_state1;
reg   [31:0] cols_V_reg_658;
wire   [0:0] exitcond1_i_fu_187_p2;
wire    ap_CS_fsm_state2;
wire   [31:0] i_V_fu_192_p2;
reg   [31:0] i_V_reg_667;
wire   [0:0] exitcond_i_fu_198_p2;
wire    ap_block_state3_pp0_stage0_iter0;
reg    ap_block_state4_pp0_stage0_iter1;
wire    ap_block_state5_pp0_stage0_iter2;
reg    ap_block_state6_pp0_stage0_iter3;
reg    ap_block_pp0_stage0_11001;
reg   [0:0] exitcond_i_reg_672_pp0_iter1_reg;
wire   [31:0] j_V_fu_203_p2;
reg    ap_enable_reg_pp0_iter0;
reg   [15:0] tmp_29_reg_681;
reg   [15:0] tmp_30_reg_687;
wire   [0:0] p_Result_s_fu_209_p3;
reg   [0:0] p_Result_s_reg_693;
wire   [0:0] p_Result_2_fu_217_p3;
reg   [0:0] p_Result_2_reg_698;
wire   [0:0] or_cond19_i_fu_263_p2;
reg   [0:0] or_cond19_i_reg_703;
reg   [0:0] or_cond19_i_reg_703_pp0_iter2_reg;
wire   [0:0] or_cond9_i_fu_295_p2;
reg   [0:0] or_cond9_i_reg_709;
reg   [0:0] or_cond9_i_reg_709_pp0_iter2_reg;
wire   [0:0] or_cond4_i_fu_333_p2;
reg   [0:0] or_cond4_i_reg_715;
reg   [0:0] or_cond4_i_reg_715_pp0_iter2_reg;
wire   [0:0] tmp_i_fu_389_p2;
reg   [0:0] tmp_i_reg_721;
wire   [0:0] ult_fu_451_p2;
reg   [0:0] ult_reg_729;
wire   [0:0] tmp_104_i_fu_497_p2;
reg   [0:0] tmp_104_i_reg_734;
wire   [0:0] tmp_119_i_fu_509_p2;
reg   [0:0] tmp_119_i_reg_740;
wire   [13:0] abs_g_i_fu_515_p2;
reg   [13:0] abs_g_i_reg_745;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state3;
reg    ap_enable_reg_pp0_iter2;
reg   [31:0] t_V_reg_165;
wire    ap_CS_fsm_state7;
reg    ap_block_pp0_stage0_01001;
wire   [0:0] tmp_25_fu_231_p3;
wire   [0:0] tmp_91_i_fu_225_p2;
wire   [0:0] rev_fu_239_p2;
wire   [0:0] tmp_99_i_fu_251_p2;
wire   [0:0] or_cond_i_fu_245_p2;
wire   [0:0] or_cond1_i_fu_257_p2;
wire   [0:0] tmp_95_i_fu_269_p2;
wire   [15:0] tmp_96_i_fu_281_p2;
wire   [0:0] or_cond8_i_fu_275_p2;
wire   [0:0] tmp_26_fu_287_p3;
wire   [0:0] tmp_27_fu_301_p3;
wire   [0:0] rev10_fu_309_p2;
wire   [0:0] tmp_107_i_fu_321_p2;
wire   [0:0] or_cond2_i_fu_315_p2;
wire   [0:0] or_cond3_i_fu_327_p2;
wire   [15:0] xs_V_3_fu_339_p2;
reg   [15:0] p_Result_3_fu_344_p4;
wire   [15:0] xs_V_4_fu_360_p2;
reg   [15:0] p_Result_4_fu_365_p4;
wire   [15:0] abs_gy_fu_375_p3;
wire   [15:0] abs_gx_fu_354_p3;
wire   [17:0] p_shl2_i_fu_399_p3;
wire   [18:0] tmp_113_cast18_i_fu_395_p1;
wire   [18:0] p_shl2_cast_i_fu_407_p1;
wire   [18:0] tmp_114_i_fu_411_p2;
wire   [19:0] p_shl_i_fu_421_p3;
wire   [17:0] p_shl1_i_fu_433_p3;
wire   [20:0] p_shl_cast_i_fu_429_p1;
wire   [20:0] p_shl1_cast_i_fu_441_p1;
wire   [20:0] tmp_116_i_fu_445_p2;
wire   [20:0] tmp_114_cast_i_fu_417_p1;
wire   [18:0] tmp_100_cast16_i_fu_457_p1;
wire   [18:0] p_shl5_cast_i_fu_461_p1;
wire   [18:0] tmp_101_i_fu_465_p2;
wire   [19:0] p_shl3_i_fu_475_p3;
wire   [20:0] p_shl3_cast_i_fu_483_p1;
wire   [20:0] p_shl4_cast_i_fu_487_p1;
wire   [20:0] tmp_101_cast_i_fu_471_p1;
wire   [20:0] tmp_103_i_fu_491_p2;
wire   [15:0] tmp_118_i_fu_503_p2;
wire   [13:0] tmp_fu_381_p1;
wire   [13:0] tmp_24_fu_385_p1;
wire   [0:0] rev9_fu_521_p2;
wire   [0:0] sel_tmp_fu_552_p2;
wire   [1:0] dir_g_cast_i_fu_526_p1;
wire   [1:0] dir_g_3_cast_i_fu_544_p3;
wire   [0:0] sel_tmp2_fu_564_p2;
wire   [0:0] sel_tmp3_fu_569_p2;
wire   [1:0] dir_g_1_i_fu_530_p3;
wire   [1:0] sel_tmp1_fu_556_p3;
wire   [0:0] sel_tmp7_demorgan_fu_582_p2;
wire   [0:0] sel_tmp7_fu_586_p2;
wire   [0:0] sel_tmp8_fu_592_p2;
wire   [1:0] dir_g_2_i_fu_537_p3;
wire   [1:0] sel_tmp4_fu_574_p3;
wire   [0:0] sel_tmp5_fu_605_p2;
wire   [0:0] sel_tmp16_demorgan_fu_615_p2;
wire   [0:0] sel_tmp6_fu_610_p2;
wire   [0:0] sel_tmp10_fu_620_p2;
wire   [0:0] sel_tmp11_fu_626_p2;
wire   [0:0] sel_tmp12_fu_632_p2;
wire   [1:0] sel_tmp9_fu_597_p3;
wire   [1:0] dir_g_7_i_fu_637_p3;
reg   [3:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 4'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((exitcond1_i_fu_187_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state3) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((exitcond1_i_fu_187_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state3)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state3);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end else if (((exitcond1_i_fu_187_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_enable_reg_pp0_iter3 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_i_fu_187_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        t_V_3_reg_176 <= 32'd0;
    end else if (((exitcond_i_fu_198_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        t_V_3_reg_176 <= j_V_fu_203_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        t_V_reg_165 <= i_V_reg_667;
    end else if ((~((ap_start == 1'b0) | (gx_cols_V_empty_n == 1'b0) | (gx_rows_V_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        t_V_reg_165 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_i_reg_672_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        abs_g_i_reg_745 <= abs_g_i_fu_515_p2;
        tmp_104_i_reg_734 <= tmp_104_i_fu_497_p2;
        tmp_119_i_reg_740 <= tmp_119_i_fu_509_p2;
        tmp_i_reg_721 <= tmp_i_fu_389_p2;
        ult_reg_729 <= ult_fu_451_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_start == 1'b0) | (gx_cols_V_empty_n == 1'b0) | (gx_rows_V_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        cols_V_reg_658 <= gx_cols_V_dout;
        rows_V_reg_653 <= gx_rows_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        exitcond_i_reg_672 <= exitcond_i_fu_198_p2;
        exitcond_i_reg_672_pp0_iter1_reg <= exitcond_i_reg_672;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        exitcond_i_reg_672_pp0_iter2_reg <= exitcond_i_reg_672_pp0_iter1_reg;
        or_cond19_i_reg_703_pp0_iter2_reg <= or_cond19_i_reg_703;
        or_cond4_i_reg_715_pp0_iter2_reg <= or_cond4_i_reg_715;
        or_cond9_i_reg_709_pp0_iter2_reg <= or_cond9_i_reg_709;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_V_reg_667 <= i_V_fu_192_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_i_reg_672 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        or_cond19_i_reg_703 <= or_cond19_i_fu_263_p2;
        or_cond4_i_reg_715 <= or_cond4_i_fu_333_p2;
        or_cond9_i_reg_709 <= or_cond9_i_fu_295_p2;
        p_Result_2_reg_698 <= gy_data_stream_V_dout[32'd15];
        p_Result_s_reg_693 <= gx_data_stream_V_dout[32'd15];
        tmp_29_reg_681 <= gx_data_stream_V_dout;
        tmp_30_reg_687 <= gy_data_stream_V_dout;
    end
end

always @ (*) begin
    if ((exitcond_i_fu_198_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state3 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state3 = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond1_i_fu_187_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond1_i_fu_187_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_i_reg_672_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        gd_data_stream_V_blk_n = gd_data_stream_V_full_n;
    end else begin
        gd_data_stream_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((exitcond_i_reg_672_pp0_iter2_reg == 1'd0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        gd_data_stream_V_write = 1'b1;
    end else begin
        gd_data_stream_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        gx_cols_V_blk_n = gx_cols_V_empty_n;
    end else begin
        gx_cols_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (gx_cols_V_empty_n == 1'b0) | (gx_rows_V_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        gx_cols_V_read = 1'b1;
    end else begin
        gx_cols_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_i_reg_672 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        gx_data_stream_V_blk_n = gx_data_stream_V_empty_n;
    end else begin
        gx_data_stream_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((exitcond_i_reg_672 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        gx_data_stream_V_read = 1'b1;
    end else begin
        gx_data_stream_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        gx_rows_V_blk_n = gx_rows_V_empty_n;
    end else begin
        gx_rows_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (gx_cols_V_empty_n == 1'b0) | (gx_rows_V_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        gx_rows_V_read = 1'b1;
    end else begin
        gx_rows_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_i_reg_672 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        gy_data_stream_V_blk_n = gy_data_stream_V_empty_n;
    end else begin
        gy_data_stream_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((exitcond_i_reg_672 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        gy_data_stream_V_read = 1'b1;
    end else begin
        gy_data_stream_V_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_start == 1'b0) | (gx_cols_V_empty_n == 1'b0) | (gx_rows_V_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((exitcond1_i_fu_187_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (exitcond_i_fu_198_p2 == 1'd1)) & ~((ap_enable_reg_pp0_iter3 == 1'b1) & (ap_enable_reg_pp0_iter2 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_enable_reg_pp0_iter3 == 1'b1) & (ap_enable_reg_pp0_iter2 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)) | ((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (exitcond_i_fu_198_p2 == 1'd1)))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign abs_g_i_fu_515_p2 = (tmp_fu_381_p1 + tmp_24_fu_385_p1);

assign abs_gx_fu_354_p3 = ((p_Result_s_reg_693[0:0] === 1'b1) ? p_Result_3_fu_344_p4 : tmp_29_reg_681);

assign abs_gy_fu_375_p3 = ((p_Result_2_reg_698[0:0] === 1'b1) ? p_Result_4_fu_365_p4 : tmp_30_reg_687);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd3];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((exitcond_i_reg_672_pp0_iter2_reg == 1'd0) & (gd_data_stream_V_full_n == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (((exitcond_i_reg_672 == 1'd0) & (gy_data_stream_V_empty_n == 1'b0)) | ((exitcond_i_reg_672 == 1'd0) & (gx_data_stream_V_empty_n == 1'b0)))));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((exitcond_i_reg_672_pp0_iter2_reg == 1'd0) & (gd_data_stream_V_full_n == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (((exitcond_i_reg_672 == 1'd0) & (gy_data_stream_V_empty_n == 1'b0)) | ((exitcond_i_reg_672 == 1'd0) & (gx_data_stream_V_empty_n == 1'b0)))));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((exitcond_i_reg_672_pp0_iter2_reg == 1'd0) & (gd_data_stream_V_full_n == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (((exitcond_i_reg_672 == 1'd0) & (gy_data_stream_V_empty_n == 1'b0)) | ((exitcond_i_reg_672 == 1'd0) & (gx_data_stream_V_empty_n == 1'b0)))));
end

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (gx_cols_V_empty_n == 1'b0) | (gx_rows_V_empty_n == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_block_state3_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state4_pp0_stage0_iter1 = (((exitcond_i_reg_672 == 1'd0) & (gy_data_stream_V_empty_n == 1'b0)) | ((exitcond_i_reg_672 == 1'd0) & (gx_data_stream_V_empty_n == 1'b0)));
end

assign ap_block_state5_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state6_pp0_stage0_iter3 = ((exitcond_i_reg_672_pp0_iter2_reg == 1'd0) & (gd_data_stream_V_full_n == 1'b0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign dir_g_1_i_fu_530_p3 = ((tmp_104_i_reg_734[0:0] === 1'b1) ? 2'd2 : 2'd1);

assign dir_g_2_i_fu_537_p3 = ((tmp_104_i_reg_734[0:0] === 1'b1) ? 2'd2 : 2'd3);

assign dir_g_3_cast_i_fu_544_p3 = ((rev9_fu_521_p2[0:0] === 1'b1) ? 2'd3 : 2'd0);

assign dir_g_7_i_fu_637_p3 = ((sel_tmp12_fu_632_p2[0:0] === 1'b1) ? 2'd0 : sel_tmp9_fu_597_p3);

assign dir_g_cast_i_fu_526_p1 = rev9_fu_521_p2;

assign exitcond1_i_fu_187_p2 = ((t_V_reg_165 == rows_V_reg_653) ? 1'b1 : 1'b0);

assign exitcond_i_fu_198_p2 = ((t_V_3_reg_176 == cols_V_reg_658) ? 1'b1 : 1'b0);

assign gd_data_stream_V_din = {{abs_g_i_reg_745}, {dir_g_7_i_fu_637_p3}};

assign i_V_fu_192_p2 = (t_V_reg_165 + 32'd1);

assign j_V_fu_203_p2 = (t_V_3_reg_176 + 32'd1);

assign or_cond19_i_fu_263_p2 = (or_cond_i_fu_245_p2 | or_cond1_i_fu_257_p2);

assign or_cond1_i_fu_257_p2 = (tmp_99_i_fu_251_p2 & p_Result_s_fu_209_p3);

assign or_cond2_i_fu_315_p2 = (rev10_fu_309_p2 & p_Result_2_fu_217_p3);

assign or_cond3_i_fu_327_p2 = (tmp_95_i_fu_269_p2 & tmp_107_i_fu_321_p2);

assign or_cond4_i_fu_333_p2 = (or_cond3_i_fu_327_p2 | or_cond2_i_fu_315_p2);

assign or_cond8_i_fu_275_p2 = (tmp_95_i_fu_269_p2 & tmp_91_i_fu_225_p2);

assign or_cond9_i_fu_295_p2 = (tmp_26_fu_287_p3 | or_cond8_i_fu_275_p2);

assign or_cond_i_fu_245_p2 = (tmp_91_i_fu_225_p2 & rev_fu_239_p2);

assign p_Result_2_fu_217_p3 = gy_data_stream_V_dout[32'd15];

always @ (*) begin
    p_Result_3_fu_344_p4 = xs_V_3_fu_339_p2;
    p_Result_3_fu_344_p4[32'd15] = |(1'd0);
end

always @ (*) begin
    p_Result_4_fu_365_p4 = xs_V_4_fu_360_p2;
    p_Result_4_fu_365_p4[32'd15] = |(1'd0);
end

assign p_Result_s_fu_209_p3 = gx_data_stream_V_dout[32'd15];

assign p_shl1_cast_i_fu_441_p1 = p_shl1_i_fu_433_p3;

assign p_shl1_i_fu_433_p3 = {{abs_gy_fu_375_p3}, {2'd0}};

assign p_shl2_cast_i_fu_407_p1 = p_shl2_i_fu_399_p3;

assign p_shl2_i_fu_399_p3 = {{abs_gx_fu_354_p3}, {2'd0}};

assign p_shl3_cast_i_fu_483_p1 = p_shl3_i_fu_475_p3;

assign p_shl3_i_fu_475_p3 = {{abs_gx_fu_354_p3}, {4'd0}};

assign p_shl4_cast_i_fu_487_p1 = p_shl2_i_fu_399_p3;

assign p_shl5_cast_i_fu_461_p1 = p_shl1_i_fu_433_p3;

assign p_shl_cast_i_fu_429_p1 = p_shl_i_fu_421_p3;

assign p_shl_i_fu_421_p3 = {{abs_gy_fu_375_p3}, {4'd0}};

assign rev10_fu_309_p2 = (tmp_27_fu_301_p3 ^ 1'd1);

assign rev9_fu_521_p2 = (ult_reg_729 ^ 1'd1);

assign rev_fu_239_p2 = (tmp_25_fu_231_p3 ^ 1'd1);

assign sel_tmp10_fu_620_p2 = (sel_tmp16_demorgan_fu_615_p2 ^ 1'd1);

assign sel_tmp11_fu_626_p2 = (sel_tmp6_fu_610_p2 | sel_tmp10_fu_620_p2);

assign sel_tmp12_fu_632_p2 = (tmp_119_i_reg_740 & sel_tmp11_fu_626_p2);

assign sel_tmp16_demorgan_fu_615_p2 = (sel_tmp7_demorgan_fu_582_p2 | or_cond4_i_reg_715_pp0_iter2_reg);

assign sel_tmp1_fu_556_p3 = ((sel_tmp_fu_552_p2[0:0] === 1'b1) ? dir_g_cast_i_fu_526_p1 : dir_g_3_cast_i_fu_544_p3);

assign sel_tmp2_fu_564_p2 = (tmp_i_reg_721 ^ 1'd1);

assign sel_tmp3_fu_569_p2 = (sel_tmp2_fu_564_p2 & or_cond9_i_reg_709_pp0_iter2_reg);

assign sel_tmp4_fu_574_p3 = ((sel_tmp3_fu_569_p2[0:0] === 1'b1) ? dir_g_1_i_fu_530_p3 : sel_tmp1_fu_556_p3);

assign sel_tmp5_fu_605_p2 = (or_cond19_i_reg_703_pp0_iter2_reg ^ 1'd1);

assign sel_tmp6_fu_610_p2 = (tmp_i_reg_721 & sel_tmp5_fu_605_p2);

assign sel_tmp7_demorgan_fu_582_p2 = (tmp_i_reg_721 | or_cond9_i_reg_709_pp0_iter2_reg);

assign sel_tmp7_fu_586_p2 = (sel_tmp7_demorgan_fu_582_p2 ^ 1'd1);

assign sel_tmp8_fu_592_p2 = (sel_tmp7_fu_586_p2 & or_cond4_i_reg_715_pp0_iter2_reg);

assign sel_tmp9_fu_597_p3 = ((sel_tmp8_fu_592_p2[0:0] === 1'b1) ? dir_g_2_i_fu_537_p3 : sel_tmp4_fu_574_p3);

assign sel_tmp_fu_552_p2 = (tmp_i_reg_721 & or_cond19_i_reg_703_pp0_iter2_reg);

assign tmp_100_cast16_i_fu_457_p1 = abs_gy_fu_375_p3;

assign tmp_101_cast_i_fu_471_p1 = tmp_101_i_fu_465_p2;

assign tmp_101_i_fu_465_p2 = (tmp_100_cast16_i_fu_457_p1 + p_shl5_cast_i_fu_461_p1);

assign tmp_103_i_fu_491_p2 = (p_shl3_cast_i_fu_483_p1 - p_shl4_cast_i_fu_487_p1);

assign tmp_104_i_fu_497_p2 = ((tmp_101_cast_i_fu_471_p1 > tmp_103_i_fu_491_p2) ? 1'b1 : 1'b0);

assign tmp_107_i_fu_321_p2 = (($signed(gx_data_stream_V_dout) < $signed(16'd1)) ? 1'b1 : 1'b0);

assign tmp_113_cast18_i_fu_395_p1 = abs_gx_fu_354_p3;

assign tmp_114_cast_i_fu_417_p1 = tmp_114_i_fu_411_p2;

assign tmp_114_i_fu_411_p2 = (tmp_113_cast18_i_fu_395_p1 + p_shl2_cast_i_fu_407_p1);

assign tmp_116_i_fu_445_p2 = (p_shl_cast_i_fu_429_p1 - p_shl1_cast_i_fu_441_p1);

assign tmp_118_i_fu_503_p2 = (abs_gy_fu_375_p3 | abs_gx_fu_354_p3);

assign tmp_119_i_fu_509_p2 = ((tmp_118_i_fu_503_p2 == 16'd0) ? 1'b1 : 1'b0);

assign tmp_24_fu_385_p1 = abs_gx_fu_354_p3[13:0];

assign tmp_25_fu_231_p3 = gy_data_stream_V_dout[32'd15];

assign tmp_26_fu_287_p3 = tmp_96_i_fu_281_p2[32'd15];

assign tmp_27_fu_301_p3 = gx_data_stream_V_dout[32'd15];

assign tmp_91_i_fu_225_p2 = (($signed(gx_data_stream_V_dout) > $signed(16'd0)) ? 1'b1 : 1'b0);

assign tmp_95_i_fu_269_p2 = (($signed(gy_data_stream_V_dout) > $signed(16'd0)) ? 1'b1 : 1'b0);

assign tmp_96_i_fu_281_p2 = (gy_data_stream_V_dout & gx_data_stream_V_dout);

assign tmp_99_i_fu_251_p2 = (($signed(gy_data_stream_V_dout) < $signed(16'd1)) ? 1'b1 : 1'b0);

assign tmp_fu_381_p1 = abs_gy_fu_375_p3[13:0];

assign tmp_i_fu_389_p2 = ((abs_gx_fu_354_p3 > abs_gy_fu_375_p3) ? 1'b1 : 1'b0);

assign ult_fu_451_p2 = ((tmp_116_i_fu_445_p2 < tmp_114_cast_i_fu_417_p1) ? 1'b1 : 1'b0);

assign xs_V_3_fu_339_p2 = (16'd0 - tmp_29_reg_681);

assign xs_V_4_fu_360_p2 = (16'd0 - tmp_30_reg_687);

endmodule //gradient_decompositi
