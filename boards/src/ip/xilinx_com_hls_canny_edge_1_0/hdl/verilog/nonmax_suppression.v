// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module nonmax_suppression (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        gd_rows_V_dout,
        gd_rows_V_empty_n,
        gd_rows_V_read,
        gd_cols_V_dout,
        gd_cols_V_empty_n,
        gd_cols_V_read,
        gd_data_stream_V_dout,
        gd_data_stream_V_empty_n,
        gd_data_stream_V_read,
        dst_data_stream_V_din,
        dst_data_stream_V_full_n,
        dst_data_stream_V_write
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_state2 = 4'd2;
parameter    ap_ST_fsm_pp0_stage0 = 4'd4;
parameter    ap_ST_fsm_state7 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [31:0] gd_rows_V_dout;
input   gd_rows_V_empty_n;
output   gd_rows_V_read;
input  [31:0] gd_cols_V_dout;
input   gd_cols_V_empty_n;
output   gd_cols_V_read;
input  [15:0] gd_data_stream_V_dout;
input   gd_data_stream_V_empty_n;
output   gd_data_stream_V_read;
output  [15:0] dst_data_stream_V_din;
input   dst_data_stream_V_full_n;
output   dst_data_stream_V_write;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg gd_rows_V_read;
reg gd_cols_V_read;
reg gd_data_stream_V_read;
reg dst_data_stream_V_write;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    gd_rows_V_blk_n;
reg    gd_cols_V_blk_n;
reg    gd_data_stream_V_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] or_cond_i_reg_867;
reg    dst_data_stream_V_blk_n;
reg    ap_enable_reg_pp0_iter3;
reg   [0:0] or_cond4_i_reg_887;
reg   [0:0] or_cond4_i_reg_887_pp0_iter2_reg;
reg   [31:0] t_V_1_reg_244;
reg   [31:0] t_V_1_reg_244_pp0_iter1_reg;
wire    ap_block_state3_pp0_stage0_iter0;
reg    ap_block_state4_pp0_stage0_iter1;
wire    ap_block_state5_pp0_stage0_iter2;
reg    ap_block_state6_pp0_stage0_iter3;
reg    ap_block_pp0_stage0_11001;
reg   [31:0] rows_V_reg_792;
reg    ap_block_state1;
reg   [31:0] cols_V_reg_797;
wire   [32:0] ret_V_fu_260_p2;
reg   [32:0] ret_V_reg_802;
wire   [32:0] ret_V_1_fu_270_p2;
reg   [32:0] ret_V_1_reg_807;
wire   [32:0] tmp_4_i_fu_276_p2;
reg   [32:0] tmp_4_i_reg_812;
wire   [32:0] ret_V_2_fu_282_p2;
reg   [32:0] ret_V_2_reg_817;
wire   [0:0] tmp_6_i_fu_292_p2;
wire    ap_CS_fsm_state2;
wire   [31:0] i_V_fu_297_p2;
reg   [31:0] i_V_reg_826;
wire   [0:0] tmp_7_i_fu_303_p2;
reg   [0:0] tmp_7_i_reg_831;
wire   [0:0] icmp_fu_318_p2;
reg   [0:0] icmp_reg_836;
wire   [0:0] tmp_9_i_fu_324_p2;
reg   [0:0] tmp_9_i_reg_841;
wire   [0:0] tmp_i_fu_330_p2;
reg   [0:0] tmp_i_reg_846;
wire   [0:0] tmp_2_i_fu_339_p2;
reg   [0:0] tmp_2_i_reg_851;
reg   [0:0] tmp_2_i_reg_851_pp0_iter1_reg;
wire   [31:0] j_V_fu_344_p2;
reg   [31:0] j_V_reg_855;
reg    ap_enable_reg_pp0_iter0;
wire   [0:0] tmp_3_i_fu_350_p2;
reg   [0:0] tmp_3_i_reg_860;
reg   [0:0] tmp_3_i_reg_860_pp0_iter1_reg;
wire   [0:0] or_cond_i_fu_355_p2;
reg   [0:0] or_cond_i_reg_867_pp0_iter1_reg;
reg   [10:0] linebuff_val_1_addr_reg_871;
wire   [0:0] tmp_16_i_fu_366_p2;
reg   [0:0] tmp_16_i_reg_882;
reg   [0:0] tmp_16_i_reg_882_pp0_iter1_reg;
wire   [0:0] or_cond4_i_fu_377_p2;
reg   [0:0] or_cond4_i_reg_887_pp0_iter1_reg;
wire   [13:0] tmp_2_fu_683_p3;
reg   [13:0] tmp_2_reg_891;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state3;
reg    ap_enable_reg_pp0_iter2;
wire   [10:0] linebuff_val_0_address0;
reg    linebuff_val_0_ce0;
wire   [15:0] linebuff_val_0_q0;
wire   [10:0] linebuff_val_0_address1;
reg    linebuff_val_0_ce1;
reg    linebuff_val_0_we1;
wire   [10:0] linebuff_val_1_address0;
reg    linebuff_val_1_ce0;
wire   [15:0] linebuff_val_1_q0;
reg    linebuff_val_1_ce1;
reg    linebuff_val_1_we1;
reg   [31:0] t_V_reg_233;
wire    ap_CS_fsm_state7;
reg   [31:0] ap_phi_mux_t_V_1_phi_fu_248_p4;
wire   [63:0] tmp_12_i_fu_360_p1;
wire   [63:0] tmp_13_i_fu_401_p1;
reg    ap_block_pp0_stage0_01001;
reg   [15:0] tmp1_i_fu_124;
reg   [15:0] tmp0_i_fu_128;
reg   [15:0] element_gd_i_fu_132;
reg   [15:0] win_val_0_1_fu_136;
wire   [15:0] win_val_0_0_0_win_va_fu_447_p3;
reg   [15:0] win_val_0_1_1_fu_140;
reg   [15:0] win_val_1_1_fu_144;
wire   [15:0] win_val_1_0_0_win_va_fu_440_p3;
reg   [15:0] win_val_1_1_1_fu_148;
reg   [15:0] win_val_2_1_fu_152;
wire   [15:0] win_val_2_0_0_win_va_fu_433_p3;
reg   [15:0] win_val_2_1_1_fu_156;
wire   [32:0] lhs_V_cast_i_fu_256_p1;
wire   [32:0] lhs_V_1_cast_i_fu_266_p1;
wire   [32:0] tmp_cast_i_fu_288_p1;
wire   [30:0] tmp_fu_308_p4;
wire   [32:0] tmp_1_cast_i_fu_335_p1;
wire   [0:0] tmp_23_i_fu_371_p2;
wire   [30:0] tmp_18_fu_468_p4;
wire   [0:0] icmp1_fu_478_p2;
wire   [0:0] tmp2_fu_489_p2;
wire   [0:0] tmp9_fu_484_p2;
wire   [1:0] current_dir_fu_454_p1;
wire   [0:0] tmp_17_i_fu_499_p2;
wire   [0:0] tmp_18_i_fu_505_p2;
wire   [0:0] sel_tmp1_fu_517_p2;
wire   [0:0] tmp_19_i_fu_511_p2;
wire   [13:0] tmp_6_fu_549_p4;
wire   [13:0] tmp_7_fu_559_p4;
wire   [13:0] tmp_5_fu_539_p4;
wire   [13:0] tmp_8_fu_569_p3;
wire   [0:0] sel_tmp2_fu_523_p2;
wire   [13:0] tmp_4_fu_529_p4;
wire   [13:0] tmp_9_fu_577_p3;
wire   [13:0] tmp_10_fu_613_p4;
wire   [13:0] tmp_11_fu_623_p4;
wire   [13:0] tmp_3_fu_603_p4;
wire   [13:0] tmp_12_fu_633_p3;
wire   [13:0] tmp_1_fu_593_p4;
wire   [13:0] tmp_13_fu_641_p3;
wire   [13:0] out_pixel_val_2_cast_fu_458_p4;
wire   [13:0] tmp_14_fu_649_p3;
wire   [13:0] tmp_s_fu_585_p3;
wire   [0:0] tmp_20_i_fu_657_p2;
wire   [0:0] tmp_21_i_fu_663_p2;
wire   [0:0] or_cond3_i_fu_669_p2;
wire   [0:0] or_cond2_i_fu_493_p2;
wire   [13:0] out_pixel_val_fu_675_p3;
reg   [3:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 4'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
end

nonmax_suppressioocq #(
    .DataWidth( 16 ),
    .AddressRange( 1920 ),
    .AddressWidth( 11 ))
linebuff_val_0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(linebuff_val_0_address0),
    .ce0(linebuff_val_0_ce0),
    .q0(linebuff_val_0_q0),
    .address1(linebuff_val_0_address1),
    .ce1(linebuff_val_0_ce1),
    .we1(linebuff_val_0_we1),
    .d1(element_gd_i_fu_132)
);

nonmax_suppressioocq #(
    .DataWidth( 16 ),
    .AddressRange( 1920 ),
    .AddressWidth( 11 ))
linebuff_val_1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(linebuff_val_1_address0),
    .ce0(linebuff_val_1_ce0),
    .q0(linebuff_val_1_q0),
    .address1(linebuff_val_1_addr_reg_871),
    .ce1(linebuff_val_1_ce1),
    .we1(linebuff_val_1_we1),
    .d1(linebuff_val_0_q0)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((tmp_6_i_fu_292_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state3) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((tmp_6_i_fu_292_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state3)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state3);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end else if (((tmp_6_i_fu_292_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_enable_reg_pp0_iter3 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (tmp_2_i_reg_851 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        t_V_1_reg_244 <= j_V_reg_855;
    end else if (((tmp_6_i_fu_292_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        t_V_1_reg_244 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        t_V_reg_233 <= i_V_reg_826;
    end else if ((~((ap_start == 1'b0) | (gd_cols_V_empty_n == 1'b0) | (gd_rows_V_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        t_V_reg_233 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_start == 1'b0) | (gd_cols_V_empty_n == 1'b0) | (gd_rows_V_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        cols_V_reg_797 <= gd_cols_V_dout;
        ret_V_1_reg_807 <= ret_V_1_fu_270_p2;
        ret_V_2_reg_817 <= ret_V_2_fu_282_p2;
        ret_V_reg_802 <= ret_V_fu_260_p2;
        rows_V_reg_792 <= gd_rows_V_dout;
        tmp_4_i_reg_812 <= tmp_4_i_fu_276_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (or_cond_i_reg_867 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        element_gd_i_fu_132 <= gd_data_stream_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_V_reg_826 <= i_V_fu_297_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_6_i_fu_292_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        icmp_reg_836 <= icmp_fu_318_p2;
        tmp_7_i_reg_831 <= tmp_7_i_fu_303_p2;
        tmp_9_i_reg_841 <= tmp_9_i_fu_324_p2;
        tmp_i_reg_846 <= tmp_i_fu_330_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        j_V_reg_855 <= j_V_fu_344_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (tmp_3_i_fu_350_p2 == 1'd1) & (tmp_2_i_fu_339_p2 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        linebuff_val_1_addr_reg_871 <= tmp_12_i_fu_360_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (tmp_2_i_fu_339_p2 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        or_cond4_i_reg_887 <= or_cond4_i_fu_377_p2;
        or_cond_i_reg_867 <= or_cond_i_fu_355_p2;
        tmp_16_i_reg_882 <= tmp_16_i_fu_366_p2;
        tmp_3_i_reg_860 <= tmp_3_i_fu_350_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        or_cond4_i_reg_887_pp0_iter1_reg <= or_cond4_i_reg_887;
        or_cond_i_reg_867_pp0_iter1_reg <= or_cond_i_reg_867;
        t_V_1_reg_244_pp0_iter1_reg <= t_V_1_reg_244;
        tmp_16_i_reg_882_pp0_iter1_reg <= tmp_16_i_reg_882;
        tmp_2_i_reg_851 <= tmp_2_i_fu_339_p2;
        tmp_2_i_reg_851_pp0_iter1_reg <= tmp_2_i_reg_851;
        tmp_3_i_reg_860_pp0_iter1_reg <= tmp_3_i_reg_860;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        or_cond4_i_reg_887_pp0_iter2_reg <= or_cond4_i_reg_887_pp0_iter1_reg;
        tmp_2_reg_891 <= tmp_2_fu_683_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (tmp_3_i_reg_860 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tmp0_i_fu_128 <= linebuff_val_0_q0;
        tmp1_i_fu_124 <= linebuff_val_1_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (tmp_2_i_reg_851_pp0_iter1_reg == 1'd1) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        win_val_0_1_1_fu_140 <= win_val_0_1_fu_136;
        win_val_0_1_fu_136 <= win_val_0_0_0_win_va_fu_447_p3;
        win_val_1_1_1_fu_148 <= win_val_1_1_fu_144;
        win_val_1_1_fu_144 <= win_val_1_0_0_win_va_fu_440_p3;
        win_val_2_1_1_fu_156 <= win_val_2_1_fu_152;
        win_val_2_1_fu_152 <= win_val_2_0_0_win_va_fu_433_p3;
    end
end

always @ (*) begin
    if ((tmp_2_i_fu_339_p2 == 1'd0)) begin
        ap_condition_pp0_exit_iter0_state3 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state3 = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_6_i_fu_292_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_2_i_reg_851 == 1'd1) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_t_V_1_phi_fu_248_p4 = j_V_reg_855;
    end else begin
        ap_phi_mux_t_V_1_phi_fu_248_p4 = t_V_1_reg_244;
    end
end

always @ (*) begin
    if (((tmp_6_i_fu_292_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((or_cond4_i_reg_887_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        dst_data_stream_V_blk_n = dst_data_stream_V_full_n;
    end else begin
        dst_data_stream_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (or_cond4_i_reg_887_pp0_iter2_reg == 1'd0) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        dst_data_stream_V_write = 1'b1;
    end else begin
        dst_data_stream_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        gd_cols_V_blk_n = gd_cols_V_empty_n;
    end else begin
        gd_cols_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (gd_cols_V_empty_n == 1'b0) | (gd_rows_V_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        gd_cols_V_read = 1'b1;
    end else begin
        gd_cols_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((or_cond_i_reg_867 == 1'd1) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        gd_data_stream_V_blk_n = gd_data_stream_V_empty_n;
    end else begin
        gd_data_stream_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (or_cond_i_reg_867 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        gd_data_stream_V_read = 1'b1;
    end else begin
        gd_data_stream_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        gd_rows_V_blk_n = gd_rows_V_empty_n;
    end else begin
        gd_rows_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (gd_cols_V_empty_n == 1'b0) | (gd_rows_V_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        gd_rows_V_read = 1'b1;
    end else begin
        gd_rows_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        linebuff_val_0_ce0 = 1'b1;
    end else begin
        linebuff_val_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        linebuff_val_0_ce1 = 1'b1;
    end else begin
        linebuff_val_0_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (or_cond_i_reg_867_pp0_iter1_reg == 1'd1) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        linebuff_val_0_we1 = 1'b1;
    end else begin
        linebuff_val_0_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        linebuff_val_1_ce0 = 1'b1;
    end else begin
        linebuff_val_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        linebuff_val_1_ce1 = 1'b1;
    end else begin
        linebuff_val_1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (tmp_3_i_reg_860 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        linebuff_val_1_we1 = 1'b1;
    end else begin
        linebuff_val_1_we1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_start == 1'b0) | (gd_cols_V_empty_n == 1'b0) | (gd_rows_V_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((tmp_6_i_fu_292_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((tmp_2_i_fu_339_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone)) & ~((ap_enable_reg_pp0_iter3 == 1'b1) & (ap_enable_reg_pp0_iter2 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_enable_reg_pp0_iter3 == 1'b1) & (ap_enable_reg_pp0_iter2 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)) | ((tmp_2_i_fu_339_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd3];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((or_cond4_i_reg_887_pp0_iter2_reg == 1'd0) & (dst_data_stream_V_full_n == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b1)) | ((or_cond_i_reg_867 == 1'd1) & (gd_data_stream_V_empty_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((or_cond4_i_reg_887_pp0_iter2_reg == 1'd0) & (dst_data_stream_V_full_n == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b1)) | ((or_cond_i_reg_867 == 1'd1) & (gd_data_stream_V_empty_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((or_cond4_i_reg_887_pp0_iter2_reg == 1'd0) & (dst_data_stream_V_full_n == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b1)) | ((or_cond_i_reg_867 == 1'd1) & (gd_data_stream_V_empty_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (gd_cols_V_empty_n == 1'b0) | (gd_rows_V_empty_n == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_block_state3_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state4_pp0_stage0_iter1 = ((or_cond_i_reg_867 == 1'd1) & (gd_data_stream_V_empty_n == 1'b0));
end

assign ap_block_state5_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state6_pp0_stage0_iter3 = ((or_cond4_i_reg_887_pp0_iter2_reg == 1'd0) & (dst_data_stream_V_full_n == 1'b0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign current_dir_fu_454_p1 = win_val_1_1_fu_144[1:0];

assign dst_data_stream_V_din = tmp_2_reg_891;

assign i_V_fu_297_p2 = (t_V_reg_233 + 32'd1);

assign icmp1_fu_478_p2 = ((tmp_18_fu_468_p4 == 31'd0) ? 1'b1 : 1'b0);

assign icmp_fu_318_p2 = ((tmp_fu_308_p4 == 31'd0) ? 1'b1 : 1'b0);

assign j_V_fu_344_p2 = (ap_phi_mux_t_V_1_phi_fu_248_p4 + 32'd1);

assign lhs_V_1_cast_i_fu_266_p1 = gd_cols_V_dout;

assign lhs_V_cast_i_fu_256_p1 = gd_rows_V_dout;

assign linebuff_val_0_address0 = tmp_12_i_fu_360_p1;

assign linebuff_val_0_address1 = tmp_13_i_fu_401_p1;

assign linebuff_val_1_address0 = tmp_12_i_fu_360_p1;

assign or_cond2_i_fu_493_p2 = (tmp9_fu_484_p2 | tmp2_fu_489_p2);

assign or_cond3_i_fu_669_p2 = (tmp_21_i_fu_663_p2 & tmp_20_i_fu_657_p2);

assign or_cond4_i_fu_377_p2 = (tmp_9_i_reg_841 | tmp_23_i_fu_371_p2);

assign or_cond_i_fu_355_p2 = (tmp_7_i_reg_831 & tmp_3_i_fu_350_p2);

assign out_pixel_val_2_cast_fu_458_p4 = {{win_val_1_1_fu_144[15:2]}};

assign out_pixel_val_fu_675_p3 = ((or_cond3_i_fu_669_p2[0:0] === 1'b1) ? out_pixel_val_2_cast_fu_458_p4 : 14'd0);

assign ret_V_1_fu_270_p2 = (lhs_V_1_cast_i_fu_266_p1 + 33'd1);

assign ret_V_2_fu_282_p2 = ($signed(lhs_V_1_cast_i_fu_266_p1) + $signed(33'd8589934591));

assign ret_V_fu_260_p2 = (lhs_V_cast_i_fu_256_p1 + 33'd1);

assign sel_tmp1_fu_517_p2 = (tmp_17_i_fu_499_p2 ^ 1'd1);

assign sel_tmp2_fu_523_p2 = (tmp_18_i_fu_505_p2 & sel_tmp1_fu_517_p2);

assign tmp2_fu_489_p2 = (tmp_i_reg_846 | tmp_16_i_reg_882_pp0_iter1_reg);

assign tmp9_fu_484_p2 = (icmp_reg_836 | icmp1_fu_478_p2);

assign tmp_10_fu_613_p4 = {{win_val_0_1_fu_136[15:2]}};

assign tmp_11_fu_623_p4 = {{win_val_2_1_1_fu_156[15:2]}};

assign tmp_12_fu_633_p3 = ((tmp_19_i_fu_511_p2[0:0] === 1'b1) ? tmp_10_fu_613_p4 : tmp_11_fu_623_p4);

assign tmp_12_i_fu_360_p1 = ap_phi_mux_t_V_1_phi_fu_248_p4;

assign tmp_13_fu_641_p3 = ((tmp_17_i_fu_499_p2[0:0] === 1'b1) ? tmp_3_fu_603_p4 : tmp_12_fu_633_p3);

assign tmp_13_i_fu_401_p1 = t_V_1_reg_244_pp0_iter1_reg;

assign tmp_14_fu_649_p3 = ((sel_tmp2_fu_523_p2[0:0] === 1'b1) ? tmp_1_fu_593_p4 : tmp_13_fu_641_p3);

assign tmp_16_i_fu_366_p2 = (($signed(tmp_1_cast_i_fu_335_p1) > $signed(ret_V_2_reg_817)) ? 1'b1 : 1'b0);

assign tmp_17_i_fu_499_p2 = ((current_dir_fu_454_p1 == 2'd0) ? 1'b1 : 1'b0);

assign tmp_18_fu_468_p4 = {{t_V_1_reg_244_pp0_iter1_reg[31:1]}};

assign tmp_18_i_fu_505_p2 = ((current_dir_fu_454_p1 == 2'd3) ? 1'b1 : 1'b0);

assign tmp_19_i_fu_511_p2 = ((current_dir_fu_454_p1 == 2'd2) ? 1'b1 : 1'b0);

assign tmp_1_cast_i_fu_335_p1 = ap_phi_mux_t_V_1_phi_fu_248_p4;

assign tmp_1_fu_593_p4 = {{win_val_2_0_0_win_va_fu_433_p3[15:2]}};

assign tmp_20_i_fu_657_p2 = ((out_pixel_val_2_cast_fu_458_p4 > tmp_14_fu_649_p3) ? 1'b1 : 1'b0);

assign tmp_21_i_fu_663_p2 = ((out_pixel_val_2_cast_fu_458_p4 > tmp_s_fu_585_p3) ? 1'b1 : 1'b0);

assign tmp_23_i_fu_371_p2 = ((ap_phi_mux_t_V_1_phi_fu_248_p4 == 32'd0) ? 1'b1 : 1'b0);

assign tmp_2_fu_683_p3 = ((or_cond2_i_fu_493_p2[0:0] === 1'b1) ? 14'd0 : out_pixel_val_fu_675_p3);

assign tmp_2_i_fu_339_p2 = ((tmp_1_cast_i_fu_335_p1 < ret_V_1_reg_807) ? 1'b1 : 1'b0);

assign tmp_3_fu_603_p4 = {{win_val_1_0_0_win_va_fu_440_p3[15:2]}};

assign tmp_3_i_fu_350_p2 = ((ap_phi_mux_t_V_1_phi_fu_248_p4 < cols_V_reg_797) ? 1'b1 : 1'b0);

assign tmp_4_fu_529_p4 = {{win_val_0_1_1_fu_140[15:2]}};

assign tmp_4_i_fu_276_p2 = ($signed(lhs_V_cast_i_fu_256_p1) + $signed(33'd8589934591));

assign tmp_5_fu_539_p4 = {{win_val_1_1_1_fu_148[15:2]}};

assign tmp_6_fu_549_p4 = {{win_val_2_1_fu_152[15:2]}};

assign tmp_6_i_fu_292_p2 = ((tmp_cast_i_fu_288_p1 < ret_V_reg_802) ? 1'b1 : 1'b0);

assign tmp_7_fu_559_p4 = {{win_val_0_0_0_win_va_fu_447_p3[15:2]}};

assign tmp_7_i_fu_303_p2 = ((t_V_reg_233 < rows_V_reg_792) ? 1'b1 : 1'b0);

assign tmp_8_fu_569_p3 = ((tmp_19_i_fu_511_p2[0:0] === 1'b1) ? tmp_6_fu_549_p4 : tmp_7_fu_559_p4);

assign tmp_9_fu_577_p3 = ((tmp_17_i_fu_499_p2[0:0] === 1'b1) ? tmp_5_fu_539_p4 : tmp_8_fu_569_p3);

assign tmp_9_i_fu_324_p2 = ((t_V_reg_233 == 32'd0) ? 1'b1 : 1'b0);

assign tmp_cast_i_fu_288_p1 = t_V_reg_233;

assign tmp_fu_308_p4 = {{t_V_reg_233[31:1]}};

assign tmp_i_fu_330_p2 = (($signed(tmp_cast_i_fu_288_p1) > $signed(tmp_4_i_reg_812)) ? 1'b1 : 1'b0);

assign tmp_s_fu_585_p3 = ((sel_tmp2_fu_523_p2[0:0] === 1'b1) ? tmp_4_fu_529_p4 : tmp_9_fu_577_p3);

assign win_val_0_0_0_win_va_fu_447_p3 = ((tmp_3_i_reg_860_pp0_iter1_reg[0:0] === 1'b1) ? element_gd_i_fu_132 : win_val_0_1_fu_136);

assign win_val_1_0_0_win_va_fu_440_p3 = ((tmp_3_i_reg_860_pp0_iter1_reg[0:0] === 1'b1) ? tmp0_i_fu_128 : win_val_1_1_fu_144);

assign win_val_2_0_0_win_va_fu_433_p3 = ((tmp_3_i_reg_860_pp0_iter1_reg[0:0] === 1'b1) ? tmp1_i_fu_124 : win_val_2_1_fu_152);

endmodule //nonmax_suppression
