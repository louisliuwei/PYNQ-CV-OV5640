// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module hysteresis (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        src_rows_V_dout,
        src_rows_V_empty_n,
        src_rows_V_read,
        src_cols_V_dout,
        src_cols_V_empty_n,
        src_cols_V_read,
        src_data_stream_V_dout,
        src_data_stream_V_empty_n,
        src_data_stream_V_read,
        dst_data_stream_V_din,
        dst_data_stream_V_full_n,
        dst_data_stream_V_write,
        threshold_low_dout,
        threshold_low_empty_n,
        threshold_low_read,
        threshold_high_dout,
        threshold_high_empty_n,
        threshold_high_read
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_state2 = 4'd2;
parameter    ap_ST_fsm_pp0_stage0 = 4'd4;
parameter    ap_ST_fsm_state7 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [31:0] src_rows_V_dout;
input   src_rows_V_empty_n;
output   src_rows_V_read;
input  [31:0] src_cols_V_dout;
input   src_cols_V_empty_n;
output   src_cols_V_read;
input  [15:0] src_data_stream_V_dout;
input   src_data_stream_V_empty_n;
output   src_data_stream_V_read;
output  [7:0] dst_data_stream_V_din;
input   dst_data_stream_V_full_n;
output   dst_data_stream_V_write;
input  [31:0] threshold_low_dout;
input   threshold_low_empty_n;
output   threshold_low_read;
input  [31:0] threshold_high_dout;
input   threshold_high_empty_n;
output   threshold_high_read;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg src_rows_V_read;
reg src_cols_V_read;
reg src_data_stream_V_read;
reg dst_data_stream_V_write;
reg threshold_low_read;
reg threshold_high_read;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    src_rows_V_blk_n;
reg    src_cols_V_blk_n;
reg    src_data_stream_V_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] or_cond_i_reg_933;
reg    dst_data_stream_V_blk_n;
reg    ap_enable_reg_pp0_iter3;
reg   [0:0] or_cond7_i_reg_954;
reg   [0:0] or_cond7_i_reg_954_pp0_iter2_reg;
reg    threshold_low_blk_n;
reg    threshold_high_blk_n;
reg   [31:0] t_V_2_reg_272;
reg   [31:0] t_V_2_reg_272_pp0_iter1_reg;
wire    ap_block_state3_pp0_stage0_iter0;
reg    ap_block_state4_pp0_stage0_iter1;
wire    ap_block_state5_pp0_stage0_iter2;
reg    ap_block_state6_pp0_stage0_iter3;
reg    ap_block_pp0_stage0_11001;
reg   [31:0] threshold_low_read_reg_840;
reg    ap_block_state1;
reg   [31:0] threshold_high_read_reg_845;
reg   [31:0] rows_V_reg_858;
reg   [31:0] cols_V_reg_863;
wire   [32:0] ret_V_fu_288_p2;
reg   [32:0] ret_V_reg_868;
wire   [32:0] ret_V_3_fu_298_p2;
reg   [32:0] ret_V_3_reg_873;
wire   [32:0] tmp_i_fu_304_p2;
reg   [32:0] tmp_i_reg_878;
wire   [32:0] ret_V_4_fu_310_p2;
reg   [32:0] ret_V_4_reg_883;
wire   [0:0] tmp_24_i_fu_320_p2;
wire    ap_CS_fsm_state2;
wire   [31:0] i_V_fu_325_p2;
reg   [31:0] i_V_reg_892;
wire   [0:0] tmp_25_i_fu_331_p2;
reg   [0:0] tmp_25_i_reg_897;
wire   [0:0] icmp_fu_346_p2;
reg   [0:0] icmp_reg_902;
wire   [0:0] tmp_27_i_fu_352_p2;
reg   [0:0] tmp_27_i_reg_907;
wire   [0:0] tmp_28_i_fu_358_p2;
reg   [0:0] tmp_28_i_reg_912;
wire   [0:0] tmp_30_i_fu_367_p2;
reg   [0:0] tmp_30_i_reg_917;
reg   [0:0] tmp_30_i_reg_917_pp0_iter1_reg;
wire   [31:0] j_V_fu_372_p2;
reg   [31:0] j_V_reg_921;
reg    ap_enable_reg_pp0_iter0;
wire   [0:0] tmp_32_i_fu_378_p2;
reg   [0:0] tmp_32_i_reg_926;
reg   [0:0] tmp_32_i_reg_926_pp0_iter1_reg;
wire   [0:0] or_cond_i_fu_383_p2;
reg   [0:0] or_cond_i_reg_933_pp0_iter1_reg;
reg   [10:0] linebuff_val_1_addr_reg_937;
wire   [0:0] or_cond6_i_fu_425_p2;
reg   [0:0] or_cond6_i_reg_948;
reg   [0:0] or_cond6_i_reg_948_pp0_iter1_reg;
reg   [0:0] or_cond6_i_reg_948_pp0_iter2_reg;
wire   [0:0] or_cond7_i_fu_437_p2;
reg   [0:0] or_cond7_i_reg_954_pp0_iter1_reg;
wire   [0:0] tmp_40_i_fu_518_p2;
reg   [0:0] tmp_40_i_reg_958;
wire   [0:0] sel_tmp4_fu_713_p2;
reg   [0:0] sel_tmp4_reg_963;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state3;
reg    ap_enable_reg_pp0_iter2;
wire   [10:0] linebuff_val_0_address0;
reg    linebuff_val_0_ce0;
wire   [15:0] linebuff_val_0_q0;
wire   [10:0] linebuff_val_0_address1;
reg    linebuff_val_0_ce1;
reg    linebuff_val_0_we1;
wire   [10:0] linebuff_val_1_address0;
reg    linebuff_val_1_ce0;
wire   [15:0] linebuff_val_1_q0;
reg    linebuff_val_1_ce1;
reg    linebuff_val_1_we1;
reg   [31:0] t_V_reg_261;
wire    ap_CS_fsm_state7;
reg   [31:0] ap_phi_mux_t_V_2_phi_fu_276_p4;
wire   [63:0] tmp_35_i_fu_388_p1;
wire   [63:0] tmp_36_i_fu_461_p1;
reg    ap_block_pp0_stage0_01001;
reg   [15:0] tmp1_i_fu_140;
reg   [15:0] tmp0_i_fu_144;
reg   [15:0] element_gd_i_fu_148;
reg   [15:0] win_val_0_1_fu_152;
wire   [15:0] win_val_0_0_0_win_va_fu_507_p3;
reg   [15:0] win_val_0_1_2_fu_156;
reg   [15:0] win_val_1_1_fu_160;
wire   [15:0] win_val_1_0_0_win_va_fu_500_p3;
reg   [15:0] win_val_1_1_2_fu_164;
reg   [15:0] win_val_2_1_fu_168;
wire   [15:0] win_val_2_0_0_win_va_fu_493_p3;
reg   [15:0] win_val_2_1_2_fu_172;
wire   [32:0] lhs_V_cast_i_fu_284_p1;
wire   [32:0] lhs_V_2_cast_i_fu_294_p1;
wire   [32:0] tmp_cast_i_fu_316_p1;
wire   [30:0] tmp_fu_336_p4;
wire   [32:0] tmp_29_cast_i_fu_363_p1;
wire   [30:0] tmp_21_fu_394_p4;
wire   [0:0] icmp2_fu_404_p2;
wire   [0:0] tmp_38_i_fu_410_p2;
wire   [0:0] tmp5_fu_420_p2;
wire   [0:0] tmp4_fu_415_p2;
wire   [0:0] tmp_59_i_fu_431_p2;
wire   [31:0] tmp_39_i_fu_514_p1;
wire   [0:0] sel_tmp6_demorgan_fu_555_p2;
wire   [0:0] slt_fu_566_p2;
wire   [31:0] tmp_42_i_fu_523_p1;
wire   [0:0] slt1_fu_577_p2;
wire   [31:0] tmp_44_i_fu_527_p1;
wire   [0:0] slt2_fu_588_p2;
wire   [31:0] tmp_46_i_fu_531_p1;
wire   [0:0] slt3_fu_599_p2;
wire   [31:0] tmp_48_i_fu_535_p1;
wire   [0:0] slt4_fu_610_p2;
wire   [31:0] tmp_50_i_fu_539_p1;
wire   [0:0] slt5_fu_621_p2;
wire   [31:0] tmp_52_i_fu_543_p1;
wire   [0:0] slt6_fu_632_p2;
wire   [31:0] tmp_54_i_fu_547_p1;
wire   [0:0] slt7_fu_643_p2;
wire   [31:0] tmp_56_i_fu_551_p1;
wire   [0:0] slt8_fu_654_p2;
wire   [0:0] rev_fu_571_p2;
wire   [0:0] sel_tmp6_fu_560_p2;
wire   [0:0] rev2_fu_593_p2;
wire   [0:0] rev3_fu_604_p2;
wire   [0:0] tmp7_fu_671_p2;
wire   [0:0] rev1_fu_582_p2;
wire   [0:0] tmp8_fu_677_p2;
wire   [0:0] tmp6_fu_665_p2;
wire   [0:0] rev4_fu_615_p2;
wire   [0:0] rev5_fu_626_p2;
wire   [0:0] rev7_fu_648_p2;
wire   [0:0] rev8_fu_659_p2;
wire   [0:0] tmp11_fu_695_p2;
wire   [0:0] rev6_fu_637_p2;
wire   [0:0] tmp12_fu_701_p2;
wire   [0:0] tmp10_fu_689_p2;
wire   [0:0] tmp13_fu_707_p2;
wire   [0:0] tmp9_fu_683_p2;
wire   [0:0] tmp14_fu_758_p2;
wire   [0:0] tmp_5_demorgan_fu_762_p2;
wire   [0:0] tmp_5_fu_767_p2;
reg   [3:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 4'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
end

nonmax_suppressioocq #(
    .DataWidth( 16 ),
    .AddressRange( 1920 ),
    .AddressWidth( 11 ))
linebuff_val_0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(linebuff_val_0_address0),
    .ce0(linebuff_val_0_ce0),
    .q0(linebuff_val_0_q0),
    .address1(linebuff_val_0_address1),
    .ce1(linebuff_val_0_ce1),
    .we1(linebuff_val_0_we1),
    .d1(element_gd_i_fu_148)
);

nonmax_suppressioocq #(
    .DataWidth( 16 ),
    .AddressRange( 1920 ),
    .AddressWidth( 11 ))
linebuff_val_1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(linebuff_val_1_address0),
    .ce0(linebuff_val_1_ce0),
    .q0(linebuff_val_1_q0),
    .address1(linebuff_val_1_addr_reg_937),
    .ce1(linebuff_val_1_ce1),
    .we1(linebuff_val_1_we1),
    .d1(linebuff_val_0_q0)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((tmp_24_i_fu_320_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state3) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((tmp_24_i_fu_320_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state3)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state3);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end else if (((tmp_24_i_fu_320_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_enable_reg_pp0_iter3 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (tmp_30_i_reg_917 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        t_V_2_reg_272 <= j_V_reg_921;
    end else if (((tmp_24_i_fu_320_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        t_V_2_reg_272 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        t_V_reg_261 <= i_V_reg_892;
    end else if ((~((ap_start == 1'b0) | (threshold_high_empty_n == 1'b0) | (threshold_low_empty_n == 1'b0) | (src_cols_V_empty_n == 1'b0) | (src_rows_V_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        t_V_reg_261 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_start == 1'b0) | (threshold_high_empty_n == 1'b0) | (threshold_low_empty_n == 1'b0) | (src_cols_V_empty_n == 1'b0) | (src_rows_V_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        cols_V_reg_863 <= src_cols_V_dout;
        ret_V_3_reg_873 <= ret_V_3_fu_298_p2;
        ret_V_4_reg_883 <= ret_V_4_fu_310_p2;
        ret_V_reg_868 <= ret_V_fu_288_p2;
        rows_V_reg_858 <= src_rows_V_dout;
        threshold_high_read_reg_845 <= threshold_high_dout;
        threshold_low_read_reg_840 <= threshold_low_dout;
        tmp_i_reg_878 <= tmp_i_fu_304_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (or_cond_i_reg_933 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        element_gd_i_fu_148 <= src_data_stream_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_V_reg_892 <= i_V_fu_325_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_24_i_fu_320_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        icmp_reg_902 <= icmp_fu_346_p2;
        tmp_25_i_reg_897 <= tmp_25_i_fu_331_p2;
        tmp_27_i_reg_907 <= tmp_27_i_fu_352_p2;
        tmp_28_i_reg_912 <= tmp_28_i_fu_358_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        j_V_reg_921 <= j_V_fu_372_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (tmp_32_i_fu_378_p2 == 1'd1) & (tmp_30_i_fu_367_p2 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        linebuff_val_1_addr_reg_937 <= tmp_35_i_fu_388_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (tmp_30_i_fu_367_p2 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        or_cond6_i_reg_948 <= or_cond6_i_fu_425_p2;
        or_cond7_i_reg_954 <= or_cond7_i_fu_437_p2;
        or_cond_i_reg_933 <= or_cond_i_fu_383_p2;
        tmp_32_i_reg_926 <= tmp_32_i_fu_378_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        or_cond6_i_reg_948_pp0_iter1_reg <= or_cond6_i_reg_948;
        or_cond7_i_reg_954_pp0_iter1_reg <= or_cond7_i_reg_954;
        or_cond_i_reg_933_pp0_iter1_reg <= or_cond_i_reg_933;
        t_V_2_reg_272_pp0_iter1_reg <= t_V_2_reg_272;
        tmp_30_i_reg_917 <= tmp_30_i_fu_367_p2;
        tmp_30_i_reg_917_pp0_iter1_reg <= tmp_30_i_reg_917;
        tmp_32_i_reg_926_pp0_iter1_reg <= tmp_32_i_reg_926;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        or_cond6_i_reg_948_pp0_iter2_reg <= or_cond6_i_reg_948_pp0_iter1_reg;
        or_cond7_i_reg_954_pp0_iter2_reg <= or_cond7_i_reg_954_pp0_iter1_reg;
        sel_tmp4_reg_963 <= sel_tmp4_fu_713_p2;
        tmp_40_i_reg_958 <= tmp_40_i_fu_518_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (tmp_32_i_reg_926 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tmp0_i_fu_144 <= linebuff_val_0_q0;
        tmp1_i_fu_140 <= linebuff_val_1_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (tmp_30_i_reg_917_pp0_iter1_reg == 1'd1) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        win_val_0_1_2_fu_156 <= win_val_0_1_fu_152;
        win_val_0_1_fu_152 <= win_val_0_0_0_win_va_fu_507_p3;
        win_val_1_1_2_fu_164 <= win_val_1_1_fu_160;
        win_val_1_1_fu_160 <= win_val_1_0_0_win_va_fu_500_p3;
        win_val_2_1_2_fu_172 <= win_val_2_1_fu_168;
        win_val_2_1_fu_168 <= win_val_2_0_0_win_va_fu_493_p3;
    end
end

always @ (*) begin
    if ((tmp_30_i_fu_367_p2 == 1'd0)) begin
        ap_condition_pp0_exit_iter0_state3 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state3 = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_24_i_fu_320_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_30_i_reg_917 == 1'd1) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_t_V_2_phi_fu_276_p4 = j_V_reg_921;
    end else begin
        ap_phi_mux_t_V_2_phi_fu_276_p4 = t_V_2_reg_272;
    end
end

always @ (*) begin
    if (((tmp_24_i_fu_320_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((or_cond7_i_reg_954_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        dst_data_stream_V_blk_n = dst_data_stream_V_full_n;
    end else begin
        dst_data_stream_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (or_cond7_i_reg_954_pp0_iter2_reg == 1'd0) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        dst_data_stream_V_write = 1'b1;
    end else begin
        dst_data_stream_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        linebuff_val_0_ce0 = 1'b1;
    end else begin
        linebuff_val_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        linebuff_val_0_ce1 = 1'b1;
    end else begin
        linebuff_val_0_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (or_cond_i_reg_933_pp0_iter1_reg == 1'd1) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        linebuff_val_0_we1 = 1'b1;
    end else begin
        linebuff_val_0_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        linebuff_val_1_ce0 = 1'b1;
    end else begin
        linebuff_val_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        linebuff_val_1_ce1 = 1'b1;
    end else begin
        linebuff_val_1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (tmp_32_i_reg_926 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        linebuff_val_1_we1 = 1'b1;
    end else begin
        linebuff_val_1_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        src_cols_V_blk_n = src_cols_V_empty_n;
    end else begin
        src_cols_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (threshold_high_empty_n == 1'b0) | (threshold_low_empty_n == 1'b0) | (src_cols_V_empty_n == 1'b0) | (src_rows_V_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        src_cols_V_read = 1'b1;
    end else begin
        src_cols_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((or_cond_i_reg_933 == 1'd1) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        src_data_stream_V_blk_n = src_data_stream_V_empty_n;
    end else begin
        src_data_stream_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (or_cond_i_reg_933 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        src_data_stream_V_read = 1'b1;
    end else begin
        src_data_stream_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        src_rows_V_blk_n = src_rows_V_empty_n;
    end else begin
        src_rows_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (threshold_high_empty_n == 1'b0) | (threshold_low_empty_n == 1'b0) | (src_cols_V_empty_n == 1'b0) | (src_rows_V_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        src_rows_V_read = 1'b1;
    end else begin
        src_rows_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        threshold_high_blk_n = threshold_high_empty_n;
    end else begin
        threshold_high_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (threshold_high_empty_n == 1'b0) | (threshold_low_empty_n == 1'b0) | (src_cols_V_empty_n == 1'b0) | (src_rows_V_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        threshold_high_read = 1'b1;
    end else begin
        threshold_high_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        threshold_low_blk_n = threshold_low_empty_n;
    end else begin
        threshold_low_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (threshold_high_empty_n == 1'b0) | (threshold_low_empty_n == 1'b0) | (src_cols_V_empty_n == 1'b0) | (src_rows_V_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        threshold_low_read = 1'b1;
    end else begin
        threshold_low_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_start == 1'b0) | (threshold_high_empty_n == 1'b0) | (threshold_low_empty_n == 1'b0) | (src_cols_V_empty_n == 1'b0) | (src_rows_V_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((tmp_24_i_fu_320_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((tmp_30_i_fu_367_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone)) & ~((ap_enable_reg_pp0_iter3 == 1'b1) & (ap_enable_reg_pp0_iter2 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_enable_reg_pp0_iter3 == 1'b1) & (ap_enable_reg_pp0_iter2 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)) | ((tmp_30_i_fu_367_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd3];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((or_cond7_i_reg_954_pp0_iter2_reg == 1'd0) & (dst_data_stream_V_full_n == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b1)) | ((or_cond_i_reg_933 == 1'd1) & (src_data_stream_V_empty_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((or_cond7_i_reg_954_pp0_iter2_reg == 1'd0) & (dst_data_stream_V_full_n == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b1)) | ((or_cond_i_reg_933 == 1'd1) & (src_data_stream_V_empty_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((or_cond7_i_reg_954_pp0_iter2_reg == 1'd0) & (dst_data_stream_V_full_n == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b1)) | ((or_cond_i_reg_933 == 1'd1) & (src_data_stream_V_empty_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (threshold_high_empty_n == 1'b0) | (threshold_low_empty_n == 1'b0) | (src_cols_V_empty_n == 1'b0) | (src_rows_V_empty_n == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_block_state3_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state4_pp0_stage0_iter1 = ((or_cond_i_reg_933 == 1'd1) & (src_data_stream_V_empty_n == 1'b0));
end

assign ap_block_state5_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state6_pp0_stage0_iter3 = ((or_cond7_i_reg_954_pp0_iter2_reg == 1'd0) & (dst_data_stream_V_full_n == 1'b0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign dst_data_stream_V_din = ((tmp_5_fu_767_p2[0:0] === 1'b1) ? 8'd255 : 8'd0);

assign i_V_fu_325_p2 = (t_V_reg_261 + 32'd1);

assign icmp2_fu_404_p2 = ((tmp_21_fu_394_p4 == 31'd0) ? 1'b1 : 1'b0);

assign icmp_fu_346_p2 = ((tmp_fu_336_p4 == 31'd0) ? 1'b1 : 1'b0);

assign j_V_fu_372_p2 = (ap_phi_mux_t_V_2_phi_fu_276_p4 + 32'd1);

assign lhs_V_2_cast_i_fu_294_p1 = src_cols_V_dout;

assign lhs_V_cast_i_fu_284_p1 = src_rows_V_dout;

assign linebuff_val_0_address0 = tmp_35_i_fu_388_p1;

assign linebuff_val_0_address1 = tmp_36_i_fu_461_p1;

assign linebuff_val_1_address0 = tmp_35_i_fu_388_p1;

assign or_cond6_i_fu_425_p2 = (tmp5_fu_420_p2 | tmp4_fu_415_p2);

assign or_cond7_i_fu_437_p2 = (tmp_59_i_fu_431_p2 | tmp_27_i_reg_907);

assign or_cond_i_fu_383_p2 = (tmp_32_i_fu_378_p2 & tmp_25_i_reg_897);

assign ret_V_3_fu_298_p2 = (lhs_V_2_cast_i_fu_294_p1 + 33'd1);

assign ret_V_4_fu_310_p2 = ($signed(lhs_V_2_cast_i_fu_294_p1) + $signed(33'd8589934591));

assign ret_V_fu_288_p2 = (lhs_V_cast_i_fu_284_p1 + 33'd1);

assign rev1_fu_582_p2 = (slt1_fu_577_p2 ^ 1'd1);

assign rev2_fu_593_p2 = (slt2_fu_588_p2 ^ 1'd1);

assign rev3_fu_604_p2 = (slt3_fu_599_p2 ^ 1'd1);

assign rev4_fu_615_p2 = (slt4_fu_610_p2 ^ 1'd1);

assign rev5_fu_626_p2 = (slt5_fu_621_p2 ^ 1'd1);

assign rev6_fu_637_p2 = (slt6_fu_632_p2 ^ 1'd1);

assign rev7_fu_648_p2 = (slt7_fu_643_p2 ^ 1'd1);

assign rev8_fu_659_p2 = (slt8_fu_654_p2 ^ 1'd1);

assign rev_fu_571_p2 = (slt_fu_566_p2 ^ 1'd1);

assign sel_tmp4_fu_713_p2 = (tmp9_fu_683_p2 & tmp13_fu_707_p2);

assign sel_tmp6_demorgan_fu_555_p2 = (tmp_40_i_fu_518_p2 | or_cond6_i_reg_948_pp0_iter1_reg);

assign sel_tmp6_fu_560_p2 = (sel_tmp6_demorgan_fu_555_p2 ^ 1'd1);

assign slt1_fu_577_p2 = (($signed(threshold_high_read_reg_845) < $signed(tmp_42_i_fu_523_p1)) ? 1'b1 : 1'b0);

assign slt2_fu_588_p2 = (($signed(threshold_high_read_reg_845) < $signed(tmp_44_i_fu_527_p1)) ? 1'b1 : 1'b0);

assign slt3_fu_599_p2 = (($signed(threshold_high_read_reg_845) < $signed(tmp_46_i_fu_531_p1)) ? 1'b1 : 1'b0);

assign slt4_fu_610_p2 = (($signed(threshold_high_read_reg_845) < $signed(tmp_48_i_fu_535_p1)) ? 1'b1 : 1'b0);

assign slt5_fu_621_p2 = (($signed(threshold_high_read_reg_845) < $signed(tmp_50_i_fu_539_p1)) ? 1'b1 : 1'b0);

assign slt6_fu_632_p2 = (($signed(threshold_high_read_reg_845) < $signed(tmp_52_i_fu_543_p1)) ? 1'b1 : 1'b0);

assign slt7_fu_643_p2 = (($signed(threshold_high_read_reg_845) < $signed(tmp_54_i_fu_547_p1)) ? 1'b1 : 1'b0);

assign slt8_fu_654_p2 = (($signed(threshold_high_read_reg_845) < $signed(tmp_56_i_fu_551_p1)) ? 1'b1 : 1'b0);

assign slt_fu_566_p2 = (($signed(threshold_high_read_reg_845) < $signed(tmp_39_i_fu_514_p1)) ? 1'b1 : 1'b0);

assign tmp10_fu_689_p2 = (rev5_fu_626_p2 & rev4_fu_615_p2);

assign tmp11_fu_695_p2 = (rev8_fu_659_p2 & rev7_fu_648_p2);

assign tmp12_fu_701_p2 = (tmp11_fu_695_p2 & rev6_fu_637_p2);

assign tmp13_fu_707_p2 = (tmp12_fu_701_p2 & tmp10_fu_689_p2);

assign tmp14_fu_758_p2 = (sel_tmp4_reg_963 | or_cond6_i_reg_948_pp0_iter2_reg);

assign tmp4_fu_415_p2 = (tmp_28_i_reg_912 | icmp2_fu_404_p2);

assign tmp5_fu_420_p2 = (tmp_38_i_fu_410_p2 | icmp_reg_902);

assign tmp6_fu_665_p2 = (sel_tmp6_fu_560_p2 & rev_fu_571_p2);

assign tmp7_fu_671_p2 = (rev3_fu_604_p2 & rev2_fu_593_p2);

assign tmp8_fu_677_p2 = (tmp7_fu_671_p2 & rev1_fu_582_p2);

assign tmp9_fu_683_p2 = (tmp8_fu_677_p2 & tmp6_fu_665_p2);

assign tmp_21_fu_394_p4 = {{ap_phi_mux_t_V_2_phi_fu_276_p4[31:1]}};

assign tmp_24_i_fu_320_p2 = ((tmp_cast_i_fu_316_p1 < ret_V_reg_868) ? 1'b1 : 1'b0);

assign tmp_25_i_fu_331_p2 = ((t_V_reg_261 < rows_V_reg_858) ? 1'b1 : 1'b0);

assign tmp_27_i_fu_352_p2 = ((t_V_reg_261 == 32'd0) ? 1'b1 : 1'b0);

assign tmp_28_i_fu_358_p2 = (($signed(tmp_cast_i_fu_316_p1) > $signed(tmp_i_reg_878)) ? 1'b1 : 1'b0);

assign tmp_29_cast_i_fu_363_p1 = ap_phi_mux_t_V_2_phi_fu_276_p4;

assign tmp_30_i_fu_367_p2 = ((tmp_29_cast_i_fu_363_p1 < ret_V_3_reg_873) ? 1'b1 : 1'b0);

assign tmp_32_i_fu_378_p2 = ((ap_phi_mux_t_V_2_phi_fu_276_p4 < cols_V_reg_863) ? 1'b1 : 1'b0);

assign tmp_35_i_fu_388_p1 = ap_phi_mux_t_V_2_phi_fu_276_p4;

assign tmp_36_i_fu_461_p1 = t_V_2_reg_272_pp0_iter1_reg;

assign tmp_38_i_fu_410_p2 = (($signed(tmp_29_cast_i_fu_363_p1) > $signed(ret_V_4_reg_883)) ? 1'b1 : 1'b0);

assign tmp_39_i_fu_514_p1 = win_val_1_1_fu_160;

assign tmp_40_i_fu_518_p2 = (($signed(tmp_39_i_fu_514_p1) < $signed(threshold_low_read_reg_840)) ? 1'b1 : 1'b0);

assign tmp_42_i_fu_523_p1 = win_val_0_0_0_win_va_fu_507_p3;

assign tmp_44_i_fu_527_p1 = win_val_0_1_fu_152;

assign tmp_46_i_fu_531_p1 = win_val_0_1_2_fu_156;

assign tmp_48_i_fu_535_p1 = win_val_1_0_0_win_va_fu_500_p3;

assign tmp_50_i_fu_539_p1 = win_val_1_1_2_fu_164;

assign tmp_52_i_fu_543_p1 = win_val_2_0_0_win_va_fu_493_p3;

assign tmp_54_i_fu_547_p1 = win_val_2_1_fu_168;

assign tmp_56_i_fu_551_p1 = win_val_2_1_2_fu_172;

assign tmp_59_i_fu_431_p2 = ((ap_phi_mux_t_V_2_phi_fu_276_p4 == 32'd0) ? 1'b1 : 1'b0);

assign tmp_5_demorgan_fu_762_p2 = (tmp_40_i_reg_958 | tmp14_fu_758_p2);

assign tmp_5_fu_767_p2 = (tmp_5_demorgan_fu_762_p2 ^ 1'd1);

assign tmp_cast_i_fu_316_p1 = t_V_reg_261;

assign tmp_fu_336_p4 = {{t_V_reg_261[31:1]}};

assign tmp_i_fu_304_p2 = ($signed(lhs_V_cast_i_fu_284_p1) + $signed(33'd8589934591));

assign win_val_0_0_0_win_va_fu_507_p3 = ((tmp_32_i_reg_926_pp0_iter1_reg[0:0] === 1'b1) ? element_gd_i_fu_148 : win_val_0_1_fu_152);

assign win_val_1_0_0_win_va_fu_500_p3 = ((tmp_32_i_reg_926_pp0_iter1_reg[0:0] === 1'b1) ? tmp0_i_fu_144 : win_val_1_1_fu_160);

assign win_val_2_0_0_win_va_fu_493_p3 = ((tmp_32_i_reg_926_pp0_iter1_reg[0:0] === 1'b1) ? tmp1_i_fu_140 : win_val_2_1_fu_168);

endmodule //hysteresis
